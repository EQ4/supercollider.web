{"name":"Supercollider.web","tagline":"Node.js based web application to create audio files for SuperCollider, with SoundCloud and Twitter integration.","body":"\r\nsupercollider.web [![Build Status](https://travis-ci.org/khilnani/supercollider.web.png)](https://travis-ci.org/khilnani/supercollider.web)\r\n=========\r\n\r\nNode.js based web application to create audio files for SuperCollider, with SoundCloud and Twitter integration.\r\n\r\n\r\nThanks to the following people for feedback, suggestions, technical insight and sanity checks. In alphabetical order -\r\n\r\n- Batuhan Bozkurt - http://www.earslap.com\r\n- Charlie Roberts - http://www.charlie-roberts.com\r\n- crucialfelix - https://github.com/crucialfelix, https://soundcloud.com/crucialfelix\r\n- Metin Yerlikaya\r\n- Nicholas Starke - http://www.nickstarke.com, https://soundcloud.com/nicholas-starke\r\n- Schemawound - http://schemawound.com/, https://soundcloud.com/schemawound\r\n\r\n\r\nInstructions\r\n=========\r\n \r\nRequirements \r\n---------\r\n- Node.js\r\n- SuperCollider\r\n- Node.js Modules\r\n\t- dysf.utils\r\n\t- soundclouder.js\r\n\t- express \r\n\t\t- If you see errors after installing express globally, use `export NODE_PATH=/usr/local/lib/node_modules`\r\n\t- forever\r\n\r\n\r\nInstallation\r\n---------\r\n- Ensure /tmp/ is available as Read/Write\r\n- Update <code>src/config.js</code>\r\n- Once the code has been pulled, change your working directory to 'src'\r\n- run: `USAGE node supercollider.js [CONFIG FILE] [PORT]`\r\n\t- Example `node supercollider.js config.js 8080`\r\n- If you want to run the process in the background, you can \r\n  - Install the forever module - `npm install forever`\r\n  - Run `forever start supercollider.js [CONFIG FILE] [PORT]`. \r\n  \t- Example `forever start supercollider.js config.js 8080`\r\n\r\nFeatures\r\n=========\r\n\r\n> **NOTE - The code is very early in development and is not safe to run on any public web server as it could expose your server to security/hacks.**\r\n\r\nCurrent Development State\r\n---------\r\n\r\n- Web based entry, validation and execution of SuperCollider code\r\n- Streaming of generated audio\r\n- Generation of Audio based on command line execution of 'sclang'\r\n- Supports Basic Auth security\r\n- State saving in the Browser using LocalStorage\r\n- SCCode.org Docs integration\r\n\r\nPlanned Features\r\n---------\r\n\r\n- SoundCloud integration to upload/store resulting audio.\r\n- Twitter integration to post resulting audio.\r\n- Realtime interaction with the SuperCollider application via web sockets to facilitate live coding.\r\n\r\nUsage\r\n=========\r\n\r\n- The application wraps SuperCollider code submitted into a Task. \r\n- If the SuperCollider code uses Tasks or Routines, it would need to compatible with being run within a Task.\r\n- Else, you will get an error message that is not very informative, specifically <code>ERROR: syntax error, unexpected '(', expecting '}'</code>\r\n- Examples\r\n\t- The following code will give an error:\r\n\r\n\r\n\t```\r\n\t(\r\n\t\t{\r\n\t\t\tSynthDef(\\test, {\r\n\t\t\t\tvar st = SinOsc.ar();\r\n\t\t\t\tOut.ar(0,st!2);\r\n\t\t\t}).add;\r\n\t\t\ts.sync;\r\n\t\t\tSynth(\\test);\r\n\t\t}.fork\r\n\t)\r\n\t```\r\n\r\n\t- The code below *will* work. *Note, only the encapsulating `'({'`  and `'}.fork)'` were removed.*\r\n\r\n\t```\r\n\tSynthDef(\\test, {\r\n\t\tvar st = SinOsc.ar();\r\n\t\tOut.ar(0,st!2);\r\n\t}).add;\r\n\ts.sync;\r\n\tSynth(\\test);\r\n\t```\t\r\n\r\n- As a reference, the resulting code the application sends to SCLang (SuperCollider) is more or less\r\n\r\n```\r\ns.waitForBoot({\r\n\tTask.new ({\r\n\r\n\t\ts.sync; \r\n\t\ts.record(~path);\r\n\r\n\t\t//---- START - inserted by server ----\r\n\r\n\t\tSynthDef(\\test, {\r\n\t\t\tvar st = SinOsc.ar();\r\n\t\t\tOut.ar(0,st!2);\r\n\t\t}).add;\r\n\t\ts.sync;\r\n\t\tSynth(\\test);\r\n\r\n\t\t//---- END - inserted by server ----\r\n\r\n\t\t(~length).wait;\r\n\t\ts.stopRecording;\r\n\t\t2.wait;\r\n\t\ts.quit;\r\n\t\t0.exit;\r\n\r\n\t}).play;\r\n});\r\n```\r\n\r\nScreenshots\r\n=========\r\n\r\n<img src=\"https://raw.github.com/dysf/supercollider.web/master/docs/image_0.png\" width=\"40%\" />\r\n<img src=\"https://raw.github.com/dysf/supercollider.web/master/docs/image_1.png\" width=\"40%\" />\r\n<img src=\"https://raw.github.com/dysf/supercollider.web/master/docs/image_2.png\" width=\"40%\" />\r\n<img src=\"https://raw.github.com/dysf/supercollider.web/master/docs/image_3.png\" width=\"40%\" />\r\n<img src=\"https://raw.github.com/dysf/supercollider.web/master/docs/image_4.png\" width=\"40%\" />\r\n<img src=\"https://raw.github.com/dysf/supercollider.web/master/docs/image_5.png\" width=\"40%\" />\r\n\r\n\r\nTechnical Notes\r\n=========\r\n\r\nOverview\r\n---------\r\n\r\n- The application allows a user to submit SuperCollider code via a form. \r\n- The submitted code is then inserted into a template that facilitates command line execution of SuperCollider (sclang) to generate audio.\r\n- Audio is generated in 16bit 44.1kHz AIFF format.\r\n- Via a post-redirect-get pattern, audio is streamed to the browser.\r\n\r\nCodebase\r\n---------\r\n\r\n- src\r\n\t- supercollider.web.js: The main js file of the application\r\n\t- config\r\n\t\t- config.js: Template config file that should contain SoundCloud client keys, Log levels etc.\r\n\t\t- config.illegals.js: Illegal keywords\r\n\t- html: Publish html/js/css files accessible at http://server:port/\r\n\t- modules: Custom modules for the application that handle request routing, utils, SoundCloud API etc.\r\n\t- templates: Template SCD files used to generate SuperCollider code send to sclang\r\n- tests: Vow and PhantomJS tests\r\n- docs: misc stuff\r\n\t- examples: Sample SuperCollider code that is created, along with the resulting audio.\r\n\t- leftovers: Experiments, abandoned ideas etc. that may be of interest.\r\n\t- misc: Reference SuperCollider code that is used for standalone testing of SC integration. \r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}